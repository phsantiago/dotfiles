local function load_packer()
	vim.cmd("packadd packer.nvim")
	return pcall(require, "packer")
end

local function get_packer()
	local install_path = vim.fn.stdpath("data") .. "/site/pack/packer/start/packer.nvim"

	if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
		vim.notify("Error: Packer is missing! Installing it...", vim.log.levels.WARN)
		vim.fn.execute("!git clone https://github.com/wbthomason/packer.nvim --depth 20 " .. install_path)

		local present, packer = load_packer()
		if present then
			vim.notify("Success: Packer was installed", vim.log.levels.INFO)
			return packer
		else
			vim.notify("Failed to clone packer under " .. install_path, vim.log.levels.ERROR)
		end
	else
		local present, packer = load_packer()
		if present then
			return packer
		end
	end
end

local packer = get_packer()

packer.init({
	display = {
		open_fn = function()
			return require("packer.util").float({ border = "single" })
		end,
		prompt_border = "single",
	},
	git = {
		clone_timeout = 600, -- Timeout, in seconds, for git clones
	},
	auto_clean = true,
	compile_on_sync = true,
	-- compile_path = require("packer.util").join_paths(vim.fn.stdpath("data"), "site", "pack", "packer_compiled.lua"),
	-- compile_path = "/home/pocco81/.local/share/nvim/site/pack/packer_compiled.lua"
	-- compile_path = require("packer.util").join_paths(vim.fn.stdpath('config'), 'plugins', 'packer_compiled.lua'),
})

packer.startup(function()
  use {
    'VonHeikemen/lsp-zero.nvim',
    branch = 'v3.x',
    requires = {
      --- Uncomment the two plugins below if you want to manage the language servers from neovim
      -- {'williamboman/mason.nvim'},
      -- {'williamboman/mason-lspconfig.nvim'},

      {'neovim/nvim-lspconfig'},
      {'hrsh7th/nvim-cmp'},
      {'hrsh7th/cmp-nvim-lsp'},
      {'L3MON4D3/LuaSnip'},
    }
  }

  use 'wbthomason/packer.nvim'

  -- lua sugar
  use 'nvim-lua/plenary.nvim'
  use 'svermeulen/vimpeccable'

  -- editing
  use {
    'lewis6991/gitsigns.nvim',
    tag = 'release',
    config = function ()
      require('gitsigns').setup {
        keymaps = {
          ['n [g'] = '<cmd>Gitsigns prev_hunk<CR>',
          ['n ]g'] = '<cmd>Gitsigns next_hunk<CR>',
          ['n <space>gb'] = '<cmd>Gitsigns blame_line<CR>',
        }
      }
    end
  }
  use {
    'anuvyklack/hydra.nvim',
    config = function()
      local Hydra = require('hydra')
      Hydra({
        name = 'Windows',
        mode = 'n',
        body = '<C-w>q',
        heads = {
          { 'h', '<C-w>h' },
          { 'j', '<C-w>j' },
          { 'k', '<C-w>k' },
          { 'l', '<C-w>l' },

          { 'H', ':vnew<CR>' },
          { 'J', ':below new<CR>' },
          { 'K', ':new<CR>' },
          { 'L', ':below vnew<CR>' },

          { '[', ':resize -2<CR>' },
          { ']', ':resize +2<CR>' },
          { '{', ':vertical resize -2<CR>' },
          { '}', ':vertical resize +2<CR>' },
          { 'q', '<C-w>q' },
        }
      })
    end
  }

  -- lang & completion
  use 'neovim/nvim-lspconfig'
  use 'williamboman/nvim-lsp-installer'
  use {
    'jose-elias-alvarez/nvim-lsp-ts-utils',
    requires = 'nvim-lua/plenary.nvim'
  }
  use {
    'nvim-treesitter/nvim-treesitter',
    run = ':TSUpdate',
    config = function()
      require('nvim-treesitter.configs').setup {
        ensure_installed = "all",
        ignore_install = { "phpdoc" }, -- buggy
        highlight = {
          enable = true,
        },
      }
    end
  }
  -- use {
  --   'hrsh7th/nvim-cmp',
  --   requires = {
  --     {'hrsh7th/cmp-nvim-lsp'},
  --     {'hrsh7th/cmp-buffer'},
  --     {'hrsh7th/cmp-nvim-lsp-signature-help'},
  --     {'quangnguyen30192/cmp-nvim-ultisnips'},
  --     {'onsails/lspkind.nvim'},
  --   }
  -- }

  use {
    'norcalli/nvim-colorizer.lua',
    config = function ()
      require('colorizer').setup()
    end
  }

  use {
    'samodostal/image.nvim',
    requires = {
      'nvim-lua/plenary.nvim'
    }
  }
end)

require('telescope').setup{ 
  defaults = { 
    file_ignore_patterns = { 
      "node_modules" 
    }
  }
}
